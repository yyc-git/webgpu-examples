#version 460
#extension GL_EXT_ray_tracing : require
#pragma shader_stage(raygen)

layout(location = 0) rayPayloadEXT vec4 hitValue;
layout(location = 1) rayPayloadEXT bool shadowed;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;

layout (set = 0, binding = 1) uniform Camera {
  vec4 forward;
  mat4 viewInverse;
  mat4 projectionInverse;
  mat4 viewProjection;
} uCamera;

layout(std140, set = 0, binding = 2) buffer PixelBuffer {
  vec4 pixels[];
} pixelBuffer;

void main() {
  ivec2 ipos = ivec2(gl_LaunchIDEXT.xy);
  const ivec2 resolution = ivec2(gl_LaunchSizeEXT.xy);

  const vec2 offset = vec2(0);
  const vec2 pixel = vec2(ipos.x, ipos.y);
  const vec2 uv = (pixel / gl_LaunchSizeEXT.xy) * 2.0 - 1.0;

  vec4 origin = uCamera.viewInverse * vec4(offset, 0, 1);
  vec4 target = uCamera.projectionInverse * (vec4(uv.x, uv.y, 1, 1));
  vec4 direction = uCamera.viewInverse * vec4(normalize(target.xyz), 0);

  hitValue = vec4(0);
  traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, origin.xyz, 1.0, direction.xyz, 8192.0, 0);

  vec4 outColor = vec4(1);

  const vec3 surfacePos = hitValue.xyz;
  const vec3 lightSurfacePos = vec3(-2048*6, 8192*5, -8192*4);
  const vec3 lightPos = lightSurfacePos - surfacePos;
  const float lightDistance = length(lightPos);
  const vec3 lightDirection = lightPos / lightDistance/* + randVec * 0.1*/;
  shadowed = false;
  traceRayEXT(topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, 1, 0, 1, surfacePos, 0.01, lightDirection, lightDistance - 0.01, 1);
  if (shadowed) outColor = vec4(0);

  const uint pixelIndex = ipos.y * resolution.x + ipos.x;
  pixelBuffer.pixels[pixelIndex] = outColor;
}
